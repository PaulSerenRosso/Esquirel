//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/InputActions/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""2b795710-b287-4812-ae8b-43eb8f73991b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""598f10a3-a71c-4ba7-bccd-c75ad4f936ae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e33561b7-f02a-4f3c-99b3-bcb830ee5774"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6046c493-1af8-4773-b534-9edb26f34a04"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""db5831e6-3bad-49c1-9063-296195b540ed"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""89c756b9-e98f-4cd1-aa79-c1a0d2e5b28f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""612eafcd-da8d-4901-8258-b84b7f219246"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""e779a209-6566-4beb-904b-aec78faf816d"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""cade776d-8858-4577-82ae-2aa0479b540e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        },
        {
            ""name"": ""Capacity"",
            ""id"": ""698439f3-8087-4c51-8d99-5115fa6e1253"",
            ""actions"": [
                {
                    ""name"": ""Capacity0"",
                    ""type"": ""Button"",
                    ""id"": ""3dd9532a-e0fc-4369-91a1-ada3d048afb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity1"",
                    ""type"": ""Button"",
                    ""id"": ""f0ec7891-2904-4b4a-b410-426f3efbc135"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity2"",
                    ""type"": ""Button"",
                    ""id"": ""5149e613-eee6-4a62-8048-6e49faf4b9eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity3"",
                    ""type"": ""Button"",
                    ""id"": ""8026275b-0b3b-47de-8543-9ab4dbed675d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevisualisableCapacity0"",
                    ""type"": ""Button"",
                    ""id"": ""fa06ff83-0b5b-49d5-b084-2364a1968652"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevisualisableCapacity1"",
                    ""type"": ""Button"",
                    ""id"": ""5f35e97a-4de4-4604-9897-cfec5498565f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevisualisableCapacity2"",
                    ""type"": ""Button"",
                    ""id"": ""bc0cc3e6-6ddb-4fb9-80bc-e86b4771cbf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevisualisableCapacity3"",
                    ""type"": ""Button"",
                    ""id"": ""5eda6fd2-ae00-4697-8d8f-bed5f2fd2094"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51ee870a-f512-42bd-87a8-5e549a2d0c34"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0c5895f-7a86-4ec0-a37d-36df2dd2f8cd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9023c4ba-5907-4e90-8ea0-9568be0c0c2b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d90d023c-32d2-45ef-b0df-f4846111d172"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevisualisableCapacity0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e35ceb82-4278-42c1-8c6a-d9d36e2c3f32"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevisualisableCapacity1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7316233-d645-4c71-bb3f-e1950ee84e9d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevisualisableCapacity2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84288946-d22e-4752-b707-38cd7ff5807a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48690e1c-db34-4db2-b69d-d05b44b423e0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevisualisableCapacity3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""b8a19349-aa66-4dd5-8530-973ba673d02f"",
            ""actions"": [
                {
                    ""name"": ""ActivateItem0"",
                    ""type"": ""Button"",
                    ""id"": ""505f98b0-c354-4398-a5f7-bba785fcb5f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem1"",
                    ""type"": ""Button"",
                    ""id"": ""a75d0200-c8f9-428a-b2b2-2dddebf835ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem2"",
                    ""type"": ""Button"",
                    ""id"": ""bb54462e-e0c5-4e4d-9d63-b4779d05adf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowHideInventory"",
                    ""type"": ""Button"",
                    ""id"": ""9c1bae78-20ad-4650-8f18-6dca8a7e31ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowHideShop"",
                    ""type"": ""Button"",
                    ""id"": ""5da3651d-bad5-49a5-82ab-367f853b0c22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c49ed578-b0f1-47cb-af6d-aabccd690b2c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8032dce0-063e-462a-8fbb-2e08c000b586"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""219bc7f0-2ebd-4478-b92b-75586b1d83db"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32496955-de5e-4a8e-8614-aee2153d3b44"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHideInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55cf922e-a410-4a8a-9dbe-2f2e5a1bf70e"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHideShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""745bed8a-cfc0-4f8a-a3ae-b70cfb354251"",
            ""actions"": [
                {
                    ""name"": ""LockToggle"",
                    ""type"": ""Button"",
                    ""id"": ""54a45e78-fe95-4f9d-bf31-b0edcdd20b4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d00ecd55-ab7c-4100-8d0c-99e5e99eedbb"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MoveMouse"",
            ""id"": ""a7ceacff-6044-40be-a466-6447c599e434"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""101c5f66-bd62-4b89-b5fd-0dcc2376f192"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActiveButton"",
                    ""type"": ""Button"",
                    ""id"": ""423383cc-dfaf-401e-9009-8a937d79459c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelButton"",
                    ""type"": ""Button"",
                    ""id"": ""9c1d8cb6-d2c3-4880-89ef-5719d11a4517"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9074bc1f-6077-45bd-89cd-62bd87652634"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0003a3b0-03b5-4a22-8db0-21af37bb3959"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActiveButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1626464c-2c19-4d3b-a020-d55c66db7793"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Surrender"",
            ""id"": ""711853ba-2a98-4089-a2ce-3f58ae2b27a8"",
            ""actions"": [
                {
                    ""name"": ""ActivateSurrender"",
                    ""type"": ""Button"",
                    ""id"": ""d696e6a6-097c-4afd-82be-9e974889d71e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeactivateSurrender"",
                    ""type"": ""Button"",
                    ""id"": ""5faa2de4-998b-4fe8-b3d9-56c573686ba1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d27d642-48fa-4645-960d-92bbb03a22cf"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateSurrender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c177c811-acd1-4cdf-9649-4ea222c6c44a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeactivateSurrender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Attack = m_Attack.FindAction("Attack", throwIfNotFound: true);
        // Capacity
        m_Capacity = asset.FindActionMap("Capacity", throwIfNotFound: true);
        m_Capacity_Capacity0 = m_Capacity.FindAction("Capacity0", throwIfNotFound: true);
        m_Capacity_Capacity1 = m_Capacity.FindAction("Capacity1", throwIfNotFound: true);
        m_Capacity_Capacity2 = m_Capacity.FindAction("Capacity2", throwIfNotFound: true);
        m_Capacity_Capacity3 = m_Capacity.FindAction("Capacity3", throwIfNotFound: true);
        m_Capacity_PrevisualisableCapacity0 = m_Capacity.FindAction("PrevisualisableCapacity0", throwIfNotFound: true);
        m_Capacity_PrevisualisableCapacity1 = m_Capacity.FindAction("PrevisualisableCapacity1", throwIfNotFound: true);
        m_Capacity_PrevisualisableCapacity2 = m_Capacity.FindAction("PrevisualisableCapacity2", throwIfNotFound: true);
        m_Capacity_PrevisualisableCapacity3 = m_Capacity.FindAction("PrevisualisableCapacity3", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_ActivateItem0 = m_Inventory.FindAction("ActivateItem0", throwIfNotFound: true);
        m_Inventory_ActivateItem1 = m_Inventory.FindAction("ActivateItem1", throwIfNotFound: true);
        m_Inventory_ActivateItem2 = m_Inventory.FindAction("ActivateItem2", throwIfNotFound: true);
        m_Inventory_ShowHideInventory = m_Inventory.FindAction("ShowHideInventory", throwIfNotFound: true);
        m_Inventory_ShowHideShop = m_Inventory.FindAction("ShowHideShop", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_LockToggle = m_Camera.FindAction("LockToggle", throwIfNotFound: true);
        // MoveMouse
        m_MoveMouse = asset.FindActionMap("MoveMouse", throwIfNotFound: true);
        m_MoveMouse_MousePos = m_MoveMouse.FindAction("MousePos", throwIfNotFound: true);
        m_MoveMouse_ActiveButton = m_MoveMouse.FindAction("ActiveButton", throwIfNotFound: true);
        m_MoveMouse_CancelButton = m_MoveMouse.FindAction("CancelButton", throwIfNotFound: true);
        // Surrender
        m_Surrender = asset.FindActionMap("Surrender", throwIfNotFound: true);
        m_Surrender_ActivateSurrender = m_Surrender.FindAction("ActivateSurrender", throwIfNotFound: true);
        m_Surrender_DeactivateSurrender = m_Surrender.FindAction("DeactivateSurrender", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private List<IAttackActions> m_AttackActionsCallbackInterfaces = new List<IAttackActions>();
    private readonly InputAction m_Attack_Attack;
    public struct AttackActions
    {
        private @PlayerInputs m_Wrapper;
        public AttackActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Attack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void AddCallbacks(IAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IAttackActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // Capacity
    private readonly InputActionMap m_Capacity;
    private List<ICapacityActions> m_CapacityActionsCallbackInterfaces = new List<ICapacityActions>();
    private readonly InputAction m_Capacity_Capacity0;
    private readonly InputAction m_Capacity_Capacity1;
    private readonly InputAction m_Capacity_Capacity2;
    private readonly InputAction m_Capacity_Capacity3;
    private readonly InputAction m_Capacity_PrevisualisableCapacity0;
    private readonly InputAction m_Capacity_PrevisualisableCapacity1;
    private readonly InputAction m_Capacity_PrevisualisableCapacity2;
    private readonly InputAction m_Capacity_PrevisualisableCapacity3;
    public struct CapacityActions
    {
        private @PlayerInputs m_Wrapper;
        public CapacityActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Capacity0 => m_Wrapper.m_Capacity_Capacity0;
        public InputAction @Capacity1 => m_Wrapper.m_Capacity_Capacity1;
        public InputAction @Capacity2 => m_Wrapper.m_Capacity_Capacity2;
        public InputAction @Capacity3 => m_Wrapper.m_Capacity_Capacity3;
        public InputAction @PrevisualisableCapacity0 => m_Wrapper.m_Capacity_PrevisualisableCapacity0;
        public InputAction @PrevisualisableCapacity1 => m_Wrapper.m_Capacity_PrevisualisableCapacity1;
        public InputAction @PrevisualisableCapacity2 => m_Wrapper.m_Capacity_PrevisualisableCapacity2;
        public InputAction @PrevisualisableCapacity3 => m_Wrapper.m_Capacity_PrevisualisableCapacity3;
        public InputActionMap Get() { return m_Wrapper.m_Capacity; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CapacityActions set) { return set.Get(); }
        public void AddCallbacks(ICapacityActions instance)
        {
            if (instance == null || m_Wrapper.m_CapacityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CapacityActionsCallbackInterfaces.Add(instance);
            @Capacity0.started += instance.OnCapacity0;
            @Capacity0.performed += instance.OnCapacity0;
            @Capacity0.canceled += instance.OnCapacity0;
            @Capacity1.started += instance.OnCapacity1;
            @Capacity1.performed += instance.OnCapacity1;
            @Capacity1.canceled += instance.OnCapacity1;
            @Capacity2.started += instance.OnCapacity2;
            @Capacity2.performed += instance.OnCapacity2;
            @Capacity2.canceled += instance.OnCapacity2;
            @Capacity3.started += instance.OnCapacity3;
            @Capacity3.performed += instance.OnCapacity3;
            @Capacity3.canceled += instance.OnCapacity3;
            @PrevisualisableCapacity0.started += instance.OnPrevisualisableCapacity0;
            @PrevisualisableCapacity0.performed += instance.OnPrevisualisableCapacity0;
            @PrevisualisableCapacity0.canceled += instance.OnPrevisualisableCapacity0;
            @PrevisualisableCapacity1.started += instance.OnPrevisualisableCapacity1;
            @PrevisualisableCapacity1.performed += instance.OnPrevisualisableCapacity1;
            @PrevisualisableCapacity1.canceled += instance.OnPrevisualisableCapacity1;
            @PrevisualisableCapacity2.started += instance.OnPrevisualisableCapacity2;
            @PrevisualisableCapacity2.performed += instance.OnPrevisualisableCapacity2;
            @PrevisualisableCapacity2.canceled += instance.OnPrevisualisableCapacity2;
            @PrevisualisableCapacity3.started += instance.OnPrevisualisableCapacity3;
            @PrevisualisableCapacity3.performed += instance.OnPrevisualisableCapacity3;
            @PrevisualisableCapacity3.canceled += instance.OnPrevisualisableCapacity3;
        }

        private void UnregisterCallbacks(ICapacityActions instance)
        {
            @Capacity0.started -= instance.OnCapacity0;
            @Capacity0.performed -= instance.OnCapacity0;
            @Capacity0.canceled -= instance.OnCapacity0;
            @Capacity1.started -= instance.OnCapacity1;
            @Capacity1.performed -= instance.OnCapacity1;
            @Capacity1.canceled -= instance.OnCapacity1;
            @Capacity2.started -= instance.OnCapacity2;
            @Capacity2.performed -= instance.OnCapacity2;
            @Capacity2.canceled -= instance.OnCapacity2;
            @Capacity3.started -= instance.OnCapacity3;
            @Capacity3.performed -= instance.OnCapacity3;
            @Capacity3.canceled -= instance.OnCapacity3;
            @PrevisualisableCapacity0.started -= instance.OnPrevisualisableCapacity0;
            @PrevisualisableCapacity0.performed -= instance.OnPrevisualisableCapacity0;
            @PrevisualisableCapacity0.canceled -= instance.OnPrevisualisableCapacity0;
            @PrevisualisableCapacity1.started -= instance.OnPrevisualisableCapacity1;
            @PrevisualisableCapacity1.performed -= instance.OnPrevisualisableCapacity1;
            @PrevisualisableCapacity1.canceled -= instance.OnPrevisualisableCapacity1;
            @PrevisualisableCapacity2.started -= instance.OnPrevisualisableCapacity2;
            @PrevisualisableCapacity2.performed -= instance.OnPrevisualisableCapacity2;
            @PrevisualisableCapacity2.canceled -= instance.OnPrevisualisableCapacity2;
            @PrevisualisableCapacity3.started -= instance.OnPrevisualisableCapacity3;
            @PrevisualisableCapacity3.performed -= instance.OnPrevisualisableCapacity3;
            @PrevisualisableCapacity3.canceled -= instance.OnPrevisualisableCapacity3;
        }

        public void RemoveCallbacks(ICapacityActions instance)
        {
            if (m_Wrapper.m_CapacityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICapacityActions instance)
        {
            foreach (var item in m_Wrapper.m_CapacityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CapacityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CapacityActions @Capacity => new CapacityActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_ActivateItem0;
    private readonly InputAction m_Inventory_ActivateItem1;
    private readonly InputAction m_Inventory_ActivateItem2;
    private readonly InputAction m_Inventory_ShowHideInventory;
    private readonly InputAction m_Inventory_ShowHideShop;
    public struct InventoryActions
    {
        private @PlayerInputs m_Wrapper;
        public InventoryActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateItem0 => m_Wrapper.m_Inventory_ActivateItem0;
        public InputAction @ActivateItem1 => m_Wrapper.m_Inventory_ActivateItem1;
        public InputAction @ActivateItem2 => m_Wrapper.m_Inventory_ActivateItem2;
        public InputAction @ShowHideInventory => m_Wrapper.m_Inventory_ShowHideInventory;
        public InputAction @ShowHideShop => m_Wrapper.m_Inventory_ShowHideShop;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @ActivateItem0.started += instance.OnActivateItem0;
            @ActivateItem0.performed += instance.OnActivateItem0;
            @ActivateItem0.canceled += instance.OnActivateItem0;
            @ActivateItem1.started += instance.OnActivateItem1;
            @ActivateItem1.performed += instance.OnActivateItem1;
            @ActivateItem1.canceled += instance.OnActivateItem1;
            @ActivateItem2.started += instance.OnActivateItem2;
            @ActivateItem2.performed += instance.OnActivateItem2;
            @ActivateItem2.canceled += instance.OnActivateItem2;
            @ShowHideInventory.started += instance.OnShowHideInventory;
            @ShowHideInventory.performed += instance.OnShowHideInventory;
            @ShowHideInventory.canceled += instance.OnShowHideInventory;
            @ShowHideShop.started += instance.OnShowHideShop;
            @ShowHideShop.performed += instance.OnShowHideShop;
            @ShowHideShop.canceled += instance.OnShowHideShop;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @ActivateItem0.started -= instance.OnActivateItem0;
            @ActivateItem0.performed -= instance.OnActivateItem0;
            @ActivateItem0.canceled -= instance.OnActivateItem0;
            @ActivateItem1.started -= instance.OnActivateItem1;
            @ActivateItem1.performed -= instance.OnActivateItem1;
            @ActivateItem1.canceled -= instance.OnActivateItem1;
            @ActivateItem2.started -= instance.OnActivateItem2;
            @ActivateItem2.performed -= instance.OnActivateItem2;
            @ActivateItem2.canceled -= instance.OnActivateItem2;
            @ShowHideInventory.started -= instance.OnShowHideInventory;
            @ShowHideInventory.performed -= instance.OnShowHideInventory;
            @ShowHideInventory.canceled -= instance.OnShowHideInventory;
            @ShowHideShop.started -= instance.OnShowHideShop;
            @ShowHideShop.performed -= instance.OnShowHideShop;
            @ShowHideShop.canceled -= instance.OnShowHideShop;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_LockToggle;
    public struct CameraActions
    {
        private @PlayerInputs m_Wrapper;
        public CameraActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LockToggle => m_Wrapper.m_Camera_LockToggle;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @LockToggle.started += instance.OnLockToggle;
            @LockToggle.performed += instance.OnLockToggle;
            @LockToggle.canceled += instance.OnLockToggle;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @LockToggle.started -= instance.OnLockToggle;
            @LockToggle.performed -= instance.OnLockToggle;
            @LockToggle.canceled -= instance.OnLockToggle;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // MoveMouse
    private readonly InputActionMap m_MoveMouse;
    private List<IMoveMouseActions> m_MoveMouseActionsCallbackInterfaces = new List<IMoveMouseActions>();
    private readonly InputAction m_MoveMouse_MousePos;
    private readonly InputAction m_MoveMouse_ActiveButton;
    private readonly InputAction m_MoveMouse_CancelButton;
    public struct MoveMouseActions
    {
        private @PlayerInputs m_Wrapper;
        public MoveMouseActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePos => m_Wrapper.m_MoveMouse_MousePos;
        public InputAction @ActiveButton => m_Wrapper.m_MoveMouse_ActiveButton;
        public InputAction @CancelButton => m_Wrapper.m_MoveMouse_CancelButton;
        public InputActionMap Get() { return m_Wrapper.m_MoveMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveMouseActions set) { return set.Get(); }
        public void AddCallbacks(IMoveMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveMouseActionsCallbackInterfaces.Add(instance);
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @ActiveButton.started += instance.OnActiveButton;
            @ActiveButton.performed += instance.OnActiveButton;
            @ActiveButton.canceled += instance.OnActiveButton;
            @CancelButton.started += instance.OnCancelButton;
            @CancelButton.performed += instance.OnCancelButton;
            @CancelButton.canceled += instance.OnCancelButton;
        }

        private void UnregisterCallbacks(IMoveMouseActions instance)
        {
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @ActiveButton.started -= instance.OnActiveButton;
            @ActiveButton.performed -= instance.OnActiveButton;
            @ActiveButton.canceled -= instance.OnActiveButton;
            @CancelButton.started -= instance.OnCancelButton;
            @CancelButton.performed -= instance.OnCancelButton;
            @CancelButton.canceled -= instance.OnCancelButton;
        }

        public void RemoveCallbacks(IMoveMouseActions instance)
        {
            if (m_Wrapper.m_MoveMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveMouseActions @MoveMouse => new MoveMouseActions(this);

    // Surrender
    private readonly InputActionMap m_Surrender;
    private List<ISurrenderActions> m_SurrenderActionsCallbackInterfaces = new List<ISurrenderActions>();
    private readonly InputAction m_Surrender_ActivateSurrender;
    private readonly InputAction m_Surrender_DeactivateSurrender;
    public struct SurrenderActions
    {
        private @PlayerInputs m_Wrapper;
        public SurrenderActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateSurrender => m_Wrapper.m_Surrender_ActivateSurrender;
        public InputAction @DeactivateSurrender => m_Wrapper.m_Surrender_DeactivateSurrender;
        public InputActionMap Get() { return m_Wrapper.m_Surrender; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SurrenderActions set) { return set.Get(); }
        public void AddCallbacks(ISurrenderActions instance)
        {
            if (instance == null || m_Wrapper.m_SurrenderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SurrenderActionsCallbackInterfaces.Add(instance);
            @ActivateSurrender.started += instance.OnActivateSurrender;
            @ActivateSurrender.performed += instance.OnActivateSurrender;
            @ActivateSurrender.canceled += instance.OnActivateSurrender;
            @DeactivateSurrender.started += instance.OnDeactivateSurrender;
            @DeactivateSurrender.performed += instance.OnDeactivateSurrender;
            @DeactivateSurrender.canceled += instance.OnDeactivateSurrender;
        }

        private void UnregisterCallbacks(ISurrenderActions instance)
        {
            @ActivateSurrender.started -= instance.OnActivateSurrender;
            @ActivateSurrender.performed -= instance.OnActivateSurrender;
            @ActivateSurrender.canceled -= instance.OnActivateSurrender;
            @DeactivateSurrender.started -= instance.OnDeactivateSurrender;
            @DeactivateSurrender.performed -= instance.OnDeactivateSurrender;
            @DeactivateSurrender.canceled -= instance.OnDeactivateSurrender;
        }

        public void RemoveCallbacks(ISurrenderActions instance)
        {
            if (m_Wrapper.m_SurrenderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISurrenderActions instance)
        {
            foreach (var item in m_Wrapper.m_SurrenderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SurrenderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SurrenderActions @Surrender => new SurrenderActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface ICapacityActions
    {
        void OnCapacity0(InputAction.CallbackContext context);
        void OnCapacity1(InputAction.CallbackContext context);
        void OnCapacity2(InputAction.CallbackContext context);
        void OnCapacity3(InputAction.CallbackContext context);
        void OnPrevisualisableCapacity0(InputAction.CallbackContext context);
        void OnPrevisualisableCapacity1(InputAction.CallbackContext context);
        void OnPrevisualisableCapacity2(InputAction.CallbackContext context);
        void OnPrevisualisableCapacity3(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnActivateItem0(InputAction.CallbackContext context);
        void OnActivateItem1(InputAction.CallbackContext context);
        void OnActivateItem2(InputAction.CallbackContext context);
        void OnShowHideInventory(InputAction.CallbackContext context);
        void OnShowHideShop(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnLockToggle(InputAction.CallbackContext context);
    }
    public interface IMoveMouseActions
    {
        void OnMousePos(InputAction.CallbackContext context);
        void OnActiveButton(InputAction.CallbackContext context);
        void OnCancelButton(InputAction.CallbackContext context);
    }
    public interface ISurrenderActions
    {
        void OnActivateSurrender(InputAction.CallbackContext context);
        void OnDeactivateSurrender(InputAction.CallbackContext context);
    }
}
